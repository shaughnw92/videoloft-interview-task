import { useState, useEffect } from "react";

import {
  fetchEvents,
  login,
  markEventForDeletion,
  updateToken
} from "../../api/api";

import EventsList from "../events-list";
import { AppContainer } from "./App.styles";

const App = () => {
  // User auth token.
  // This is needed to fetch events.
  const [userAuthToken, setUserAuthToken] = useState();

  /*
    Events for user's camera.

    Each array element is an object with shape:

    {
      startTime: number - timestamp for start of the event (this is unique per event)
      endTime: number - timestamp for end of the event
      thumbnail: string - URL of thumbnail for event video
      description: string - description of event
      deleted: boolean - whether event has been marked for deletion
    }
  */
  const [events, setEvents] = useState();

  // Initial login to get user auth token.
  useEffect(() => {
    const initialLogin = async () => {
      // login() returns user auth token.
      // For the sake of this exercise, don't worry about sending email/password to backend.
      const token = await login();
      setUserAuthToken(token);
    };

    initialLogin();
  }, []);

  // Refresh user auth token every 10 mins.
  useEffect(() => {
    const getNewToken = async () => {
      // refreshToken() sends current auth token to backend and returns a new auth token.
      const token = await updateToken(userAuthToken);
      setUserAuthToken(token);
    };

    setInterval(getNewToken, 600000);
  }, [userAuthToken]);

  // Fetch initial events.
  // Then fetch events every 5 mins in case of changes (e.g. new event generated).
  useEffect(() => {
    if (userAuthToken) {
      const updateEvents = async () => {
        // fetchEvents() returns array of all events generated by the user's camera.
        const events = await fetchEvents(userAuthToken);

        setEvents(events);
      };

      // Fetch initial events.
      updateEvents();

      // Update events every 5 mins.
      setInterval(updateEvents, 300000);
    }
  }, [userAuthToken]);

  // Show loading state until events fetched.
  if (!events) {
    return <p>Loading...</p>;
  }

  const deleteEvent = async (eventToDelete) => {
    const startTime = eventToDelete.startTime;

    try {
      // markEventForDeletion() makes request to backend to delete the specified event.
      await markEventForDeletion(startTime);
      setEvents((events) =>
        events.map((event) =>
          event.startTime === startTime ? { ...event, deleted: true } : event
        )
      );
    } catch (error) {
      console.error(error);
    }
  };

  return (
    <AppContainer>
      {/* Events */}
      <EventsList
        title={<h1>Events</h1>}
        description={<p>Click an event to delete it.</p>}
        events={events
          .filter(({ deleted }) => !deleted)
          .map((event) => ({
            ...event,
            onClick: () => deleteEvent(event)
          }))}
      />

      {/* Deleted events */}
      <EventsList
        title={<h1>Deleted events</h1>}
        description={<p>These events have been marked for deletion:</p>}
        events={events.filter(({ deleted }) => deleted)}
      />
    </AppContainer>
  );
};

export default App;
